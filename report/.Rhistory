filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111")
library(tidyverse)
#gave warnings, I'm guessing most of the warnings are because of columns that have no data
#accountability, gives overall status of school
accountability <- readxl::read_excel("Stat-471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS, MADE_PROGRESS)
write.csv(accountability_filtered, "Stat-471-final-project/cleaned data/Accountability.csv", row.names = FALSE)
#BOCES is a program of shared educational services provided to school districts. Should we keep this???
#Need index = Need-to-Resource Capacity Category. The need/resource capacity index, a measure of a district's ability to meet the needs of its students with local
# resources, is the ratio of the estimated poverty percentage1 (expressed in standard score form) to the Combined
# Wealth Ratio2 (expressed in standard score form).
BOCES <- readxl::read_excel("Stat-471-final-project/data/BOCES and N_RC.xlsx")
BOCES_filtered <- BOCES %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, BOCES_CD, NEEDS_INDEX)
write.csv(BOCES_filtered, "Stat-471-final-project/cleaned data/BOCES.csv", row.names = FALSE)
#amount of money spent on the school
expenditure <- readxl::read_excel("Stat471-final-project/data/Expenditures per Pupil.xlsx")
expenditure_filtered <- expenditure %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, PUPIL_COUNT_TOT, PER_FEDERAL_EXP, PER_STATE_LOCAL_EXP)
write.csv(expenditure_filtered, "Stat-471-final-project/cleaned data/Expenditure.csv", row.names = FALSE)
#gave warnings
#removed the 2020 only statistics
inexperience <- readxl::read_excel("Stat471-final-project/data/Inexperienced Teachers and Principals.xlsx")
inexperience_filtered <- inexperience %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, NUM_TEACH, PER_TEACH_INEXP, NUM_PRINC, PER_PRINC_INEXP) #UNSURE IF SHOULD USE TOTAL NUM OF TEACH AND PRINC
write.csv(inexperience_filtered, "Stat-471-final-project/cleaned data/Inexperience.csv", row.names = FALSE)
#gave warnings
#out of certification (teachers no certification)
OOC <- readxl::read_excel("Stat-471-final-project/data/Teachers Teaching Out of Certification.xlsx")
OOC_filtered <- OOC %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, PER_OUT_CERT)
write.csv(OOC_filtered, "Stat-471-final-project/cleaned data/Teachers Teaching Out of Certification.csv", row.names = FALSE)
#Questions:
#Should I keep total number of teachers?
#Do we have data on the pupil-teacher ratios for these schools?
#We could probably count that using total pupil and total teacher counts. Can also do this for principal to pupil
library(tidyverse)
gradRate <- read_csv("stat-471-final-project/cleaned data/Graduation Rate.csv") %>%
select(c(INSTITUTION_ID, ENTITY_CD, ENTITY_NAME, GRAD_RATE))
attendance <- read_csv("stat-471-final-project/cleaned data/Attendance.csv") %>%
select(c(ENTITY_CD, ATTENDANCE_RATE))
reduced_lunch <- read_csv("stat-471-final-project/cleaned data/Precent Reduced Lunch.csv") %>%
select(c(ENTITY_CD, PER_FREE_LUNCH, PER_REDUCED_LUNCH))
staff <- read_csv("stat-471-final-project/cleaned data/Staff.csv") %>%
select(-c(SCHOOL_NAME))
suspensions <- read_csv("stat-471-final-project/cleaned data/Suspensions.csv") %>%
select(c(ENTITY_CD, PER_SUSPENSIONS))
demographics <- read_csv("stat-471-final-project/cleaned data/Demographics.csv") %>%
select(-c(ENTITY_NAME))
accountability <- read_csv("stat-471-final-project/cleaned data/Accountability.csv") %>%
select(-c(MADE_PROGRESS))
boces <- read_csv("stat-471-final-project/cleaned data/BOCES.csv") %>%
select(-c(BOCES_CD))
expenditure <- read_csv("stat-471-final-project/cleaned data/Expenditure.csv")
inexperience <- read_csv("stat-471-final-project/cleaned data/Inexperience.csv") %>%
select(-c(NUM_TEACH, NUM_PRINC))
certification <- read_csv("stat-471-final-project/cleaned data/Teachers Teaching Out of Certification.csv")
final_table <- merge(gradRate, attendance, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, reduced_lunch, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, staff, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, suspensions, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, demographics, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, inexperience, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, certification, by = "ENTITY_CD", all.y = FALSE)
# These tables are missing data
final_table <- merge(final_table, accountability, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, boces, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, expenditure, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
View(final_table)
final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111")
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111")
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
library(tidyverse)
# read in the cleaned data
nyschool_data = read_csv("Stat-471-final-project/cleaned data/merged data.csv")
# split into train and test
set.seed(5)
n = nrow(nyschool_data)
train_samples = sample(1:n, round(0.8*n))
nyschool_train = nyschool_data[train_samples,]
nyschool_test = nyschool_data[-train_samples,]
# save the train and test data
write_csv(nyschool_train, file = "Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
write_csv(nyschool_test, file = "Stat-471-final-project/cleaned data/final data/nyschool_test.csv")
# read in the cleaned data
nyschool_train = read_csv("Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
View(nyschool_train)
rf_fit = randomForest(GRAD_RATE~., data = nyschool_train)
#Random Forests
library(randomForest)
library(tidyverse)
# read in the cleaned data
nyschool_train = read_csv("Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
rf_fit = randomForest(GRAD_RATE~., data = nyschool_train)
rf_fit = randomForest(gradRate ~ ., data = nyschool_train)
rf_fit = randomForest(grad_Rate ~ ., data = nyschool_train)
nyschool_train %>%
select(GRAD_RATE)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ attendance_rate, data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ PER_FREE_LUNCH, data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ PER_FREE_LUNCH, data = nyschool_train)
rf_fit
rf_fit = randomForest(GRAD_RATE ~ PER_FREE_LUNCH, data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ATTENDANCE_RATE, data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
final_table %>%
select_if(function(x) any(is.na(x)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
View(accountability_filtered)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na("MISSING")
library(tidyverse)
#gave warnings, I'm guessing most of the warnings are because of columns that have no data
#accountability, gives overall status of school
accountability <- readxl::read_excel("Stat-471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na("MISSING")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING"))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered%>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS) %>%
filter(OVERALL_STATUS = "MISSING")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS) %>%
filter(OVERALL_STATUS == "MISSING")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(OVERALL_STATUS="MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered%>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list("MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na("MISSING") %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered$OVERALL_STATUS %>%
replace_na("MISSING")
accountability_filtered = accountability_filtered$OVERALL_STATUS %>%
replace_na("MISSING")
accountability_filtered[is.na(accountability_filtered)] = "MISSING"
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered[is.na(accountability_filtered)] = "MISSING"
accountability_filtered %>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing", na.rm = TRUE)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing", na.rm = TRUE))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing", na.rm = TRUE))
"Missing")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing"))
accountability_filtered %>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
Missing))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing"))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered %>%
select_if(function(x) any(is.na(x)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS)
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing"))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
View(final_table)
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING"))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(final_table)
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
final_table <- merge(gradRate, attendance, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, reduced_lunch, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, staff, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, suspensions, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, demographics, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, inexperience, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, certification, by = "ENTITY_CD", all.y = FALSE)
# These tables are missing data
final_table <- merge(final_table, accountability, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, boces, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, expenditure, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
gradRate <- read_csv("stat-471-final-project/cleaned data/Graduation Rate.csv") %>%
select(c(INSTITUTION_ID, ENTITY_CD, ENTITY_NAME, GRAD_RATE))
attendance <- read_csv("stat-471-final-project/cleaned data/Attendance.csv") %>%
select(c(ENTITY_CD, ATTENDANCE_RATE))
reduced_lunch <- read_csv("stat-471-final-project/cleaned data/Precent Reduced Lunch.csv") %>%
select(c(ENTITY_CD, PER_FREE_LUNCH, PER_REDUCED_LUNCH))
staff <- read_csv("stat-471-final-project/cleaned data/Staff.csv") %>%
select(-c(SCHOOL_NAME))
suspensions <- read_csv("stat-471-final-project/cleaned data/Suspensions.csv") %>%
select(c(ENTITY_CD, PER_SUSPENSIONS))
demographics <- read_csv("stat-471-final-project/cleaned data/Demographics.csv") %>%
select(-c(ENTITY_NAME))
accountability <- read_csv("stat-471-final-project/cleaned data/Accountability.csv") %>%
select(-c(MADE_PROGRESS))
boces <- read_csv("stat-471-final-project/cleaned data/BOCES.csv") %>%
select(-c(BOCES_CD))
expenditure <- read_csv("stat-471-final-project/cleaned data/Expenditure.csv")
inexperience <- read_csv("stat-471-final-project/cleaned data/Inexperience.csv") %>%
select(-c(NUM_TEACH, NUM_PRINC))
certification <- read_csv("stat-471-final-project/cleaned data/Teachers Teaching Out of Certification.csv")
final_table <- merge(gradRate, attendance, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, reduced_lunch, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, staff, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, suspensions, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, demographics, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, inexperience, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, certification, by = "ENTITY_CD", all.y = FALSE)
# These tables are missing data
final_table <- merge(final_table, accountability, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, boces, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, expenditure, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
setwd("~/")
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/final data/Merged Data.csv", row.names = FALSE)
# read in the cleaned data
nyschool_data = read_csv("Stat-471-final-project/cleaned data/final data/merged data.csv")
# split into train and test
set.seed(5)
n = nrow(nyschool_data)
train_samples = sample(1:n, round(0.8*n))
nyschool_train = nyschool_data[train_samples,]
nyschool_test = nyschool_data[-train_samples,]
# save the train and test data
write_csv(nyschool_train, file = "Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
write_csv(nyschool_test, file = "Stat-471-final-project/cleaned data/final data/nyschool_test.csv")
# read in the cleaned data
nyschool_train = read_csv("Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
View(nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ -c(institution_id, entity_name), data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ -c(INSTITUTION_ID, ENTITY_NAME), data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ -INSTITUTION_ID, data = nyschool_train)
nyschool_train %>%
rf_fit = randomForest(grad_rate ~ ., data = nyschool_train)
nyschool_train %>%
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ . -INSTITUTION_ID, data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ . -INSTITUTION_ID -ENTITY_NAME, data = nyschool_train)
setwd("~/Stat-471-final-project/report")
