geom_line(aes(y=MannAlk)) +
geom_point(aes(y=Control)) +
geom_line(aes(y=Control)) +
xlim(0,10)+ ylim(0,45000)+
labs(x="Time (days)", y="MFI")+
theme_bw()
ggplot(washout_data, aes(x=time, colour=red)) +
geom_point(aes(y=MannAlk)) +
geom_line(aes(y=MannAlk)) +
geom_point(aes(y=Control)) +
geom_line(aes(y=Control)) +
xlim(0,10)+ ylim(0,45000)+
labs(x="Time (days)", y="MFI")+
theme_bw()
ggplot(washout_data, aes(x=time, colour="red")) +
geom_point(aes(y=MannAlk)) +
geom_line(aes(y=MannAlk)) +
geom_point(aes(y=Control)) +
geom_line(aes(y=Control)) +
xlim(0,10)+ ylim(0,45000)+
labs(x="Time (days)", y="MFI")+
theme_bw()
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
library(tidyverse)     # tidyverse
spam_data = read_tsv("../../data/spam_data.tsv")
# extract training data
spam_train = spam_data %>%
filter(test == 0) %>%
select(-test)
# extract test data
spam_test = spam_data %>%
filter(test == 1) %>%
select(-test)
spam_train
spam_train %>%
summarise(mean(sp))
View(spam_train)
spam_train
View(spam_data)
View(spam_train)
spam_train %>%
summarise(mean(spam))
?summarise_at
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")))
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs=a)
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs="a")
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs(n(), mean))
avg_word_freq
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs(n(), mean, median))
avg_word_freq
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs(mean, median))
avg_word_freq
avg_word_freq = spam_train %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
avg_word_freq
avg_word_freq_long = avg_word_freq %>%
pivot_longer()
avg_word_freq_long = avg_word_freq %>%
pivot_longer(names_to = "word", values_to="avg_freq")
avg_word_freq_long = avg_word_freq %>%
pivot_longer(1,names_to = "word", values_to="avg_freq")
avg_word_freq_long
avg_word_freq_long = avg_word_freq %>%
pivot_longer(cols = starts_with("word_freq"),names_to = "word", values_to="avg_freq")
avg_word_freq_long
avg_word_freq_long = avg_word_freq %>%
pivot_longer(cols = everything(), names_prefix = "word_freq_",names_to = "word", values_to="avg_freq")
avg_word_freq_long
avg_word_freq_long %>%
ggplot(aes(x=word,y=avg_freq)) +
geom_histogram()
avg_word_freq_long %>%
ggplot(aes(x=word)) +
geom_histogram()
avg_word_freq_long %>%
ggplot(aes(y=avg_freq)) +
geom_histogram()
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram()
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram(binwidth=1)
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram(binwidth=0.5)
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram(binwidth=0.1)
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram(binwidth=0.2)
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram(binwidth=0.1)
avg_word_freq_long %>%
arrange()
avg_word_freq_long %>%
arrange(avg_freq)
avg_word_freq_long %>%
arrange(desc(avg_freq))
avg_word_freq_long %>%
arrange(desc(avg_freq)) %>%
top_n(3)
View(spam_data)
avg_word_freq_long %>%
ggplot(aes(x=avg_freq)) +
geom_histogram(binwidth=0.1)
spam_train
avg_word_freq_spam = spam_train %>%
filter(spam==1) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
spam_train %>%
filter(spam==1)
avg_word_freq_spam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
avg_word_freq_spam = spam_train %>%
filter(spam==1) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
avg_word_freq_spam = spam_train %>%
filter(spam==1) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(), names_prefix = "word_freq_",names_to = "word", values_to="avg_freq")
avg_word_freq_spam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq")
avg_word_freq_nospam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
inner_join(avg_word_freq_spam)
avg_word_freq_nospam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
inner_join(avg_word_freq_spam)
spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq")
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
full_join(avg_word_freq_spam)
avg_word_freq_nospam
avg_word_freq_nospam
avg_word_freq_spam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
full_join(avg_word_freq_spam)
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
full_join(avg_word_freq_spam, by=c("word"))
avg_word_freq_nospam
?full_join
spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq")
avg_word_freq_nospam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
full_join(avg_word_freq_spam, by=c("word")) %>%
rename(avg_freq_spam = avg_freq.x)
avg_word_freq_nospam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
full_join(avg_word_freq_spam, by=c("word")) %>%
rename(avg_freq_nospam = avg_freq.x, avg_freq_spam = avg_freq.y)
avg_word_freq_nospam
avg_word_freq_nospam = spam_train %>%
filter(spam==0) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq")
avg_word_freq_diff = avg_word_freq_nospam %>%
full_join(avg_word_freq_spam, by=c("word")) %>%
rename(avg_freq_nospam = avg_freq.x, avg_freq_spam = avg_freq.y)
avg_word_freq_diff
avg_word_freq_spam
avg_word_freq_diff
avg_word_freq_diff = avg_word_freq_nospam %>%
full_join(avg_word_freq_spam, by=c("word")) %>%
rename(avg_freq_nospam = avg_freq.x, avg_freq_spam = avg_freq.y) %>%
mutate(difference = avg_freq_spam - avg_freq_nospam)
avg_word_freq_diff
diff_avg_word_freq = avg_word_freq_nospam %>%
full_join(avg_word_freq_spam, by=c("word")) %>%
rename(avg_freq_nospam = avg_freq.x, avg_freq_spam = avg_freq.y) %>%
mutate(difference = avg_freq_spam - avg_freq_nospam) %>%
select(word, difference)
diff_avg_word_freq
diff_avg_word_freq = avg_word_freq_nospam %>%
full_join(avg_word_freq_spam, by=c("word")) %>%
rename(avg_freq_nospam = avg_freq.x, avg_freq_spam = avg_freq.y) %>%
mutate(diff_avg_freq = avg_freq_spam - avg_freq_nospam) %>%
select(word, diff_avg_freq)
diff_avg_word_freq
diff_avg_word_freq %>%
ggplot(aes(x=diff_avg_freq)) +
geom_histogram()
diff_avg_word_freq %>%
arrange(desc(diff_avg_freq)) +
top_n(3)
diff_avg_word_freq %>%
arrange(desc(diff_avg_freq))
diff_avg_word_freq %>%
arrange(desc(diff_avg_freq)) %>%
top_n(3)
diff_avg_word_freq %>%
arrange(diff_avg_freq) %>%
top_n(3)
diff_avg_word_freq %>%
arrange(diff_avg_freq)
diff_avg_word_freq %>%
arrange(diff_avg_freq) %>%
top_n(3)
diff_avg_word_freq %>%
arrange(diff_avg_freq) %>%
bottom_n(3)
diff_avg_word_freq %>%
arrange(diff_avg_freq) %>%
bot_n(3)
diff_avg_word_freq %>%
arrange(diff_avg_freq)
diff_avg_word_freq %>%
arrange(desc(diff_avg_freq)) %>%
top_n(-3)
spam_train%>%
mutate(spam_true = (spam == 1))
spam_train%>%
mutate(spam_true = (spam == 1)) %>%
pivot_wider(names_from = spam, values_to= spam_true)
spam_train%>%
mutate(spam_true = (spam == 1)) %>%
pivot_wider(names_from = spam, values_from= spam_true)
spam_train%>%
mutate(spam_true = (spam == 1)) %>%
pivot_wider(names_from = spam_true, values_from= spam)
spam_train%>%
group_by(spam)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_wider(names_from=spam, values_from=-spam)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_wider(names_from=spam, values_from=word_freq_make)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean))
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = everything(),
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq")
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq")
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq) %>%
mutate(diff_avg_freq = "1" - "0")
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq) %>%
rename(spam = "1", nospam = "0")
mutate(diff_avg_freq = spam - nospam)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq) %>%
rename(spam = "1", nospam = "0") %>%
mutate(diff_avg_freq = spam - nospam)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq) %>%
rename(spam = "1", nospam = "0") %>%
mutate(diff_avg_freq = spam - nospam) %>%
select(-spam, -nospam)
spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq) %>%
rename(spam = "1", nospam = "0") %>%
mutate(diff_avg_freq = spam - nospam) %>%
select(-spam, -nospam) %>%
arrange(diff_avg_freq)
diff_avg_word_freq = spam_train%>%
group_by(spam) %>%
summarise_at(vars(starts_with("word_freq")), funs(mean)) %>%
pivot_longer(cols = -spam,
names_prefix = "word_freq_",
names_to = "word", values_to="avg_freq") %>%
pivot_wider(names_from=spam, values_from=avg_freq) %>%
rename(spam = "1", nospam = "0") %>%
mutate(diff_avg_freq = spam - nospam) %>%
select(-spam, -nospam)
diff_avg_word_freq %>%
arrange(desc(diff_avg_freq)) %>%
top_n(-3)
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(keras)         # to train neural networks
setwd("~/Stat471-final-project")
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where the status was overriden
select(-MADE_PROGRESS_FLAG, -CHANGE_STATUS_FLAG, -OVERRIDE)
library(tidyverse)
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where the status was overriden
select(-MADE_PROGRESS_FLAG, -CHANGE_STATUS_FLAG, -OVERRIDE)
setwd("~/Stat471-final-project")
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where the status was overriden
select(-MADE_PROGRESS_FLAG, -CHANGE_STATUS_FLAG, -OVERRIDE)
#gave warnings, I'm guessing most of the warnings are because of columns that have no data
#accountability, gives overall status of school
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
setwd("~/Stat471-final-project")
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where the status was overriden
select(-MADE_PROGRESS_FLAG, -CHANGE_STATUS_FLAG, -OVERRIDE)
#gave warnings, I'm guessing most of the warnings are because of columns that have no data
#accountability, gives overall status of school
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
setwd("~/")
#gave warnings, I'm guessing most of the warnings are because of columns that have no data
#accountability, gives overall status of school
accountability <- readxl::read_excel("Stat471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where the status was overriden
select(-MADE_PROGRESS_FLAG, -CHANGE_STATUS_FLAG, -OVERRIDE)
View(accountability_filtered)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where the status was overriden
select(ENTITY_CD, OVERALL_STATUS, MADE_PROGRESS)
gradRate <- readxl::read_excel("Stat471-final-project/data/ACC HS Graduation Rate.xlsx")
View(gradRate)
write.csv(accountability_filtered, "Stat471-final-project/cleaned data/Accountability.csv")
BOCES <- readxl::read_excel("Stat471-final-project/data/BOCES and N_RC.xlsx")
BOCES_filtered <- BOCES %>%
filter(YEAR == "2019")
View(BOCES_filtered)
BOCES_filtered <- BOCES %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, BOCES_CD, NEEDS_INDEX)
View(BOCES_filtered)
write.csv(BOCES_filtered, "Stat471-final-project/cleaned data/BOCES.csv")
#amount of money spent on the school
expenditure <- readxl::read_excel("Stat471-final-project/data/Expenditures per Pupil.xlsx")
expenditure_filtered <- expenditure %>%
filter(YEAR == "2019")
View(expenditure_filtered)
expenditure_filtered <- expenditure %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, PUPIL_COUNT_TOT, PER_FEDERAL_EXP, PER_STATE_LOCAL_EXP)
View(expenditure)
write.csv(expenditure_filtered, "Stat471-final-project/cleaned data/Expenditure.csv")
#gave warnings
#removed the 2020 only statistics
inexperience <- readxl::read_excel("Stat471-final-project/data/Inexperienced Teachers and Principals.xlsx")
inexperience_filtered <- inexperience %>%
filter(YEAR == "2019") %>%
select(-TEACH_DATA_REP_FLAG, -PRIN_DATA_REP_FLAG, -TOT_PRINC_LOW, -TOT_PRINC_HIGH, -TOT_TEACH_LOW, -TOT_TEACH_HIGH)
View(inexperience_filtered)
inexperience_filtered <- inexperience %>%
filter(YEAR == "2019")
inexperience_filtered <- inexperience %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, NUM_TEACH, PER_TEACH_INEXP, NUM_PRINC, PER_PRINC_INEXP)
write.csv(inexperience_filtered, "Stat471-final-project/cleaned data/Inexperience.csv")
#gave warnings
#out of certification (teachers no certification)
OOC <- readxl::read_excel("Stat471-final-project/data/Teachers Teaching Out of Certification.xlsx")
OOC_filtered <- OOC %>%
filter(YEAR == "2019") %>%
select(-TOT_OUT_CERT_LOW, -TOT_OUT_CERT_HIGH, -OUT_OF_CERT_DATA_REP_FLAG)
View(OOC_filtered)
OOC_filtered <- OOC %>%
filter(YEAR == "2019")
OOC_filtered <- OOC %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, PER_OUT_CERT)
write.csv(OOC_filtered, "Stat471-final-project/cleaned data/Teachers Teaching Out of Certification.csv")
gradRate_filtered <- gradRate %>%
filter(SUBGROUP_NAME == "All Students") %>%
filter(YEAR == "2019") %>%
filter(COHORT == "Combined") %>%
filter(!grepl("DISTRICT", ENTITY_NAME))
View(gradRate_filtered)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS, MADE_PROGRESS)
write.csv(accountability_filtered, "Stat471-final-project/cleaned data/Accountability.csv")
BOCES_filtered <- BOCES %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, BOCES_CD, NEEDS_INDEX)
write.csv(BOCES_filtered, "Stat471-final-project/cleaned data/BOCES.csv")
expenditure_filtered <- expenditure %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, PUPIL_COUNT_TOT, PER_FEDERAL_EXP, PER_STATE_LOCAL_EXP)
write.csv(expenditure_filtered, "Stat471-final-project/cleaned data/Expenditure.csv")
inexperience_filtered <- inexperience %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, NUM_TEACH, PER_TEACH_INEXP, NUM_PRINC, PER_PRINC_INEXP) #UNSURE IF SHOULD USE TOTAL NUM OF TEACH AND PRINC
write.csv(inexperience_filtered, "Stat471-final-project/cleaned data/Inexperience.csv")
OOC_filtered <- OOC %>%
filter(YEAR == "2019") %>%
select(ENTITY_CD, PER_OUT_CERT)
write.csv(OOC_filtered, "Stat471-final-project/cleaned data/Teachers Teaching Out of Certification.csv")
setwd("~/Stat471-final-project")
