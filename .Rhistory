accountability <- readxl::read_excel("Stat-471-final-project/data/Accountability Status.xlsx")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na("MISSING")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING"))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered%>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS) %>%
filter(OVERALL_STATUS = "MISSING")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(x = 0, y = "MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS) %>%
filter(OVERALL_STATUS == "MISSING")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list(OVERALL_STATUS="MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered%>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na(list("MISSING")) %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
replace_na("MISSING") %>%
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered$OVERALL_STATUS %>%
replace_na("MISSING")
accountability_filtered = accountability_filtered$OVERALL_STATUS %>%
replace_na("MISSING")
accountability_filtered[is.na(accountability_filtered)] = "MISSING"
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered[is.na(accountability_filtered)] = "MISSING"
accountability_filtered %>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing", na.rm = TRUE)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing", na.rm = TRUE))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing", na.rm = TRUE))
"Missing")
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing"))
accountability_filtered %>%
select_if(function(x) any(is.na(x)))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
Missing))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS) %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing"))
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS)
accountability_filtered %>%
select_if(function(x) any(is.na(x)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
accountability_filtered <- accountability %>%
filter(YEAR == "2019") %>%
filter(is.na(OVERRIDE)) %>% #remove values where overall status was overriden
select(ENTITY_CD, OVERALL_STATUS)
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"Missing"))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(NA_column)
View(final_table)
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING"))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
"MISSING")) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
NA_column = final_table %>%
select_if(function(x) any(is.na(x)))
View(final_table)
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
final_table <- merge(gradRate, attendance, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, reduced_lunch, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, staff, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, suspensions, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, demographics, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, inexperience, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, certification, by = "ENTITY_CD", all.y = FALSE)
# These tables are missing data
final_table <- merge(final_table, accountability, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, boces, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, expenditure, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
gradRate <- read_csv("stat-471-final-project/cleaned data/Graduation Rate.csv") %>%
select(c(INSTITUTION_ID, ENTITY_CD, ENTITY_NAME, GRAD_RATE))
attendance <- read_csv("stat-471-final-project/cleaned data/Attendance.csv") %>%
select(c(ENTITY_CD, ATTENDANCE_RATE))
reduced_lunch <- read_csv("stat-471-final-project/cleaned data/Precent Reduced Lunch.csv") %>%
select(c(ENTITY_CD, PER_FREE_LUNCH, PER_REDUCED_LUNCH))
staff <- read_csv("stat-471-final-project/cleaned data/Staff.csv") %>%
select(-c(SCHOOL_NAME))
suspensions <- read_csv("stat-471-final-project/cleaned data/Suspensions.csv") %>%
select(c(ENTITY_CD, PER_SUSPENSIONS))
demographics <- read_csv("stat-471-final-project/cleaned data/Demographics.csv") %>%
select(-c(ENTITY_NAME))
accountability <- read_csv("stat-471-final-project/cleaned data/Accountability.csv") %>%
select(-c(MADE_PROGRESS))
boces <- read_csv("stat-471-final-project/cleaned data/BOCES.csv") %>%
select(-c(BOCES_CD))
expenditure <- read_csv("stat-471-final-project/cleaned data/Expenditure.csv")
inexperience <- read_csv("stat-471-final-project/cleaned data/Inexperience.csv") %>%
select(-c(NUM_TEACH, NUM_PRINC))
certification <- read_csv("stat-471-final-project/cleaned data/Teachers Teaching Out of Certification.csv")
final_table <- merge(gradRate, attendance, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, reduced_lunch, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, staff, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, suspensions, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, demographics, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, inexperience, by = "ENTITY_CD", all.y = FALSE)
final_table <- merge(final_table, certification, by = "ENTITY_CD", all.y = FALSE)
# These tables are missing data
final_table <- merge(final_table, accountability, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, boces, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
final_table <- merge(final_table, expenditure, by = "ENTITY_CD", all.x = TRUE, all.y = FALSE)
#final tidying, such as replacing NA values
final_table = final_table %>%
filter(GRAD_RATE != "s") %>%
filter(ENTITY_CD != "111111111111") %>%
mutate(OVERALL_STATUS = replace(OVERALL_STATUS,
is.na(OVERALL_STATUS),
"MISSING")) %>%
mutate(NEEDS_INDEX = replace(NEEDS_INDEX,
is.na(NEEDS_INDEX),
median(NEEDS_INDEX, na.rm = TRUE))) %>%
mutate(PUPIL_COUNT_TOT = replace(PUPIL_COUNT_TOT,
is.na(PUPIL_COUNT_TOT),
mean(PUPIL_COUNT_TOT, na.rm = TRUE))) %>%
mutate(PER_FEDERAL_EXP = replace(PER_FEDERAL_EXP,
is.na(PER_FEDERAL_EXP),
mean(PER_FEDERAL_EXP, na.rm = TRUE)))%>%
mutate(PER_STATE_LOCAL_EXP = replace(PER_STATE_LOCAL_EXP,
is.na(PER_STATE_LOCAL_EXP),
mean(PER_STATE_LOCAL_EXP, na.rm = TRUE)))
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
setwd("~/")
write.csv(final_table, "stat-471-final-project/cleaned data/Merged Data.csv", row.names = FALSE)
write.csv(final_table, "stat-471-final-project/cleaned data/final data/Merged Data.csv", row.names = FALSE)
# read in the cleaned data
nyschool_data = read_csv("Stat-471-final-project/cleaned data/final data/merged data.csv")
# split into train and test
set.seed(5)
n = nrow(nyschool_data)
train_samples = sample(1:n, round(0.8*n))
nyschool_train = nyschool_data[train_samples,]
nyschool_test = nyschool_data[-train_samples,]
# save the train and test data
write_csv(nyschool_train, file = "Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
write_csv(nyschool_test, file = "Stat-471-final-project/cleaned data/final data/nyschool_test.csv")
# read in the cleaned data
nyschool_train = read_csv("Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
View(nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ -c(institution_id, entity_name), data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ -c(INSTITUTION_ID, ENTITY_NAME), data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ -INSTITUTION_ID, data = nyschool_train)
nyschool_train %>%
rf_fit = randomForest(grad_rate ~ ., data = nyschool_train)
nyschool_train %>%
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ ., data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ . -INSTITUTION_ID, data = nyschool_train)
rf_fit = randomForest(GRAD_RATE ~ . -INSTITUTION_ID -ENTITY_NAME, data = nyschool_train)
set.seed(1)
# fit random forest with different interaction depths
gbm_fit_1 = gbm(GRAD_RATE ~ .,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 1,
shrinkage = 0.1,
cv.folds = 5,
data = nyschool_train)
gbm_fit_2 = gbm(GRAD_RATE ~ .,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 2,
shrinkage = 0.1,
cv.folds = 5,
data = nyschool_train)
gbm_fit_3 = gbm(GRAD_RATE ~ .,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 5,
data = nyschool_train)
library(gbm)
library(tidyverse)
# read in the cleaned data
nyschool_train = read_csv("Stat-471-final-project/cleaned data/final data/nyschool_train.csv")
nyschool_train = nyschool_train %>%
mutate(across(OVERALL_STATUS, as.factor)) %>%
select(-ENTITY_CD, -ENTITY_NAME, -INSTITUTION_ID)
set.seed(1)
# fit random forest with different interaction depths
gbm_fit_1 = gbm(GRAD_RATE ~ .,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 1,
shrinkage = 0.1,
cv.folds = 5,
data = nyschool_train)
gbm_fit_2 = gbm(GRAD_RATE ~ .,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 2,
shrinkage = 0.1,
cv.folds = 5,
data = nyschool_train)
gbm_fit_3 = gbm(GRAD_RATE ~ .,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 5,
data = nyschool_train)
ntrees = 1000
cv_errors = bind_rows(
tibble(ntree = 1:ntrees, cv_err = gbm_fit_1$cv.error, depth = 1),
tibble(ntree = 1:ntrees, cv_err = gbm_fit_2$cv.error, depth = 2),
tibble(ntree = 1:ntrees, cv_err = gbm_fit_3$cv.error, depth = 3)
)
# plot CV errors
cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = factor(depth))) +
# add horizontal dashed lines at the minima of the three curves
geom_hline(yintercept = min(gbm_fit_1$cv.error),
linetype = "dashed", color = "red") +
geom_hline(yintercept = min(gbm_fit_2$cv.error),
linetype = "dashed", color = "green") +
geom_hline(yintercept = min(gbm_fit_3$cv.error),
linetype = "dashed", color = "blue") +
geom_line() +
# set colors to match horizontal line minima
scale_color_manual(labels = c("1", "2", "3"),
values = c("red", "green", "blue")) +
labs(x = "Number of trees", y = "CV error", colour = "Interaction depth") +
theme_bw()
# plot CV errors
cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = factor(depth))) +
# add horizontal dashed lines at the minima of the three curves
geom_hline(yintercept = min(gbm_fit_1$cv.error),
linetype = "dashed", color = "red") +
geom_hline(yintercept = min(gbm_fit_2$cv.error),
linetype = "dashed", color = "green") +
geom_hline(yintercept = min(gbm_fit_3$cv.error),
linetype = "dashed", color = "blue") +
geom_line() +
# set colors to match horizontal line minima
scale_color_manual(labels = c("1", "2", "3"),
values = c("red", "green", "blue")) +
labs(x = "Number of trees", y = "CV error", colour = "Interaction depth") +
scale_y_log10() +
theme_bw()
# plot CV errors
cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = factor(depth))) +
# add horizontal dashed lines at the minima of the three curves
geom_hline(yintercept = min(gbm_fit_1$cv.error),
linetype = "dashed", color = "red") +
geom_hline(yintercept = min(gbm_fit_2$cv.error),
linetype = "dashed", color = "green") +
geom_hline(yintercept = min(gbm_fit_3$cv.error),
linetype = "dashed", color = "blue") +
geom_line() +
# set colors to match horizontal line minima
scale_color_manual(labels = c("1", "2", "3"),
values = c("red", "green", "blue")) +
labs(x = "Number of trees", y = "CV error", colour = "Interaction depth") +
#scale_y_log10() +
theme_bw()
# plot CV errors
cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = factor(depth))) +
# add horizontal dashed lines at the minima of the three curves
geom_hline(yintercept = min(gbm_fit_1$cv.error),
linetype = "dashed", color = "red") +
geom_hline(yintercept = min(gbm_fit_2$cv.error),
linetype = "dashed", color = "green") +
geom_hline(yintercept = min(gbm_fit_3$cv.error),
linetype = "dashed", color = "blue") +
geom_line() +
# set colors to match horizontal line minima
scale_color_manual(labels = c("1", "2", "3"),
values = c("red", "green", "blue")) +
labs(x = "Number of trees", y = "CV error", colour = "Interaction depth") +
scale_y_log10() +
theme_bw()
gbm_fit_tuned = gbm_fit_2
optimal_num_trees = gbm.perf(gbm_fit_2, plot.it = FALSE)
optimal_num_trees
#table of variable importance
boost_importance = summary(gbm_fit_tuned, n.trees = optimal_num_trees, plotit = FALSE) %>%
head(10)
boost_importance
setwd("~/Stat-471-final-project")
